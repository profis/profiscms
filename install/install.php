<?php
/**
 * @var PC_database $db
 * @var string[] $t
 */
require_once CORE_ROOT . 'functions.php';
if (!defined('PC_INSTALL_SEQUENCE')) {
    echo '<p>Illegal call. Terminating.</p>';
    exit();
}
$config = $_POST['config'];
$cfg = $installer->get_config();

$new_config_lines = array();

function add_db_config_line(&$lines, &$currentData, $key, $setTo, $default, $required) {
	if( $required || $setTo != (array_key_exists($key, $currentData) ? $currentData[$key] : $default) ) {
		$lines[] = "\$cfg['db']['{$key}'] = '{$setTo}';";
		$currentData[$key] = $setTo; // this will be required later by update script
	}
}

if( !isset($cfg['db']) )
	$cfg['db'] = array();

add_db_config_line($new_config_lines, $cfg['db'], 'type', $config['db_driver'], 'mysql', false);
add_db_config_line($new_config_lines, $cfg['db'], 'host', $config['db_host'], 'localhost', true);
add_db_config_line($new_config_lines, $cfg['db'], 'port', $config['db_port'], '', false);
add_db_config_line($new_config_lines, $cfg['db'], 'user', $config['db_user'], '', true);
add_db_config_line($new_config_lines, $cfg['db'], 'pass', $config['db_pass'], '', true);
add_db_config_line($new_config_lines, $cfg['db'], 'name', $config['db_name'], '', true);
add_db_config_line($new_config_lines, $cfg['db'], 'prefix', $config['table_prefix'], '', true);

$salt = $cfg['salt'] = random_string(30, '#%$^ABCDEFGHIJKLMNOQPRTSZYXWabcdefghijklmnoqprtszyxw1234567890');

$new_config_lines[] = "";
$new_config_lines[] = "//Generated by install wizard. Changing this value will make all password hashes in the database invalid:";
$new_config_lines[] = "\$cfg['salt'] = '".$salt."';";

$cfg_content = file_get_contents(PC_CONFIG_FILE);
$cfg_content = rtrim($cfg_content);
$php_end = '?>';
$php_end_len = strlen($php_end);
if (mb_substr($cfg_content, - $php_end_len) == $php_end) {
	$cfg_content = mb_substr($cfg_content, 0, - $php_end_len);
}


$cfg_content .= "\n" . implode("\n", $new_config_lines);

$error = false;

try {
	$port = '';
	if (!empty($config['db_port'])) {
		$port = 'port='.$config['db_port'].';';
	}
	$db = new PDO("mysql:host=".$config['db_host'] . ";" . $port . "dbname=".$config['db_name'], $config['db_user'], $config['db_pass']);
	$db->query("SET NAMES '".$cfg['db']['charset']."'");
} catch (PDOException $e) {
	$error = '<strong>' . $t['install_failed_db'] . '</strong><br />' . $t['install_error'] . ': <p><strong>'. $e->getMessage() ."</strong></p>";
}

if (!$error) {
	require_once CORE_ROOT . 'classes/PC_auth_users_base.php';
	$auth_users = new PC_auth_users_base();
	$replacements = array(
		'{prefix}' =>  trim($db->quote($config['table_prefix']), "'"),
		'{admin_username}' => trim($db->quote($config['admin_username']), "'"),
		'{admin_password}' => trim($db->quote($auth_users->Encode_password($config['admin_password'], $salt)), "'"),
	);
	if (!$installer->import_sql_file(PC_INSTALL_DIR . 'data/' . $config['db_driver'] . '.sql', $replacements)) {
		$error = "Database could not be imported!";
	}
}

if( !$error ) {
	include dirname(__FILE__) . '/data/script.php';
}

if (!$error) {
	if (!file_put_contents(PC_CONFIG_FILE, $cfg_content)) {
		 $error = $t['config_write_error'];
	}
}

include('finish.php');